{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"NeuroCog DB Documentation NeuroCog DB serves the Neurocognition & Mobility Lab 's to: promote a BIDS -style data standard across the lab's projects. provide an interactive data catalog to facilitate project management. Quickstart If you\u2019re already familiar with NeuroCog DB (and have Python setup on your system), you can quickly start using NeuroCog DB using the instructions below. For more detailed instructions on getting set up, see the Setup section. Install neurocogdb from the Github repository: pip install git+https://github.com/neurocog-mobility/neurocog-db.git Test the installation, then run your first analysis! neurocogdb --help","title":"Home"},{"location":"#neurocog-db-documentation","text":"NeuroCog DB serves the Neurocognition & Mobility Lab 's to: promote a BIDS -style data standard across the lab's projects. provide an interactive data catalog to facilitate project management.","title":"NeuroCog DB Documentation"},{"location":"#quickstart","text":"If you\u2019re already familiar with NeuroCog DB (and have Python setup on your system), you can quickly start using NeuroCog DB using the instructions below. For more detailed instructions on getting set up, see the Setup section. Install neurocogdb from the Github repository: pip install git+https://github.com/neurocog-mobility/neurocog-db.git Test the installation, then run your first analysis! neurocogdb --help","title":"Quickstart"},{"location":"schema/","text":"Schema The catalog is built upon 3 files distributed through the NeuroCog drive: program_info.yaml : One for each program in the lab-administration/Programs subfolder project_info.yaml : One for each project in the projects subfolder members_info.yaml : A single file in the people subfolder The full data catalog schema is displayed below:","title":"Schema"},{"location":"schema/#schema","text":"The catalog is built upon 3 files distributed through the NeuroCog drive: program_info.yaml : One for each program in the lab-administration/Programs subfolder project_info.yaml : One for each project in the projects subfolder members_info.yaml : A single file in the people subfolder The full data catalog schema is displayed below:","title":"Schema"},{"location":"schema/members/","text":"member_info.yaml members: - name: Member Name role: Member Role (PI, PDF, PhD, MSc, ...) active: True/False - ... Important Members entries should only be added. For previous members, active status should be set to False rather than removal.","title":"member_info.yaml"},{"location":"schema/members/#member_infoyaml","text":"members: - name: Member Name role: Member Role (PI, PDF, PhD, MSc, ...) active: True/False - ... Important Members entries should only be added. For previous members, active status should be set to False rather than removal.","title":"member_info.yaml"},{"location":"schema/programs/","text":"program_info.yaml program_name: Program Name status: in-progress, complete, archived start_date: YYYY-MM-DD end_date: YYYY-MM-DD members: - First Member - ... collaborators: - name: First Collaborator organization: Organization Name - ... funding: - organization: Funding Organization start_date: YYYY-MM-DD end_date: YYYY-MM-DD notes: notes - ... Important All listed members should match a name in the members_info.yaml file located in the people subfolder.","title":"program_info.yaml"},{"location":"schema/programs/#program_infoyaml","text":"program_name: Program Name status: in-progress, complete, archived start_date: YYYY-MM-DD end_date: YYYY-MM-DD members: - First Member - ... collaborators: - name: First Collaborator organization: Organization Name - ... funding: - organization: Funding Organization start_date: YYYY-MM-DD end_date: YYYY-MM-DD notes: notes - ... Important All listed members should match a name in the members_info.yaml file located in the people subfolder.","title":"program_info.yaml"},{"location":"schema/projects/","text":"project_info.yaml project_name: Project Name ethics: integer start_date: YYYY-MM-DD end_date: YYYY-MM-DD data_path: \"./XX_Data/\" program: Program Name members: - Member Name - ... location: - name: NC Lab, ... participants: groups: - label: Group Label total: 0 collected: 0 attributes: [\"attribute one\", \"attribute two\", ...] data_sources: - category: motion modality: imu, gait-carpet, mocap device: Shimmer, Opals, ... - category: physio modality: cardiac, respiratory, pupils, eda, emg device: Shimmer, Bittium, ... - category: neuro modality: func, anat, dwi, nirs, eeg device: NIRx, ... - category: clinic modality: clinometrics, demographics device: FoG-Q, PDQ, UPDRS, ... - category: misc modality: beh, video device: GoPro, ... outputs: - name: Output Title type: Publication, Pre-print, Conference poster, Conference presentation, ... url: https://doi.org/ date: YYYY-MM-DD - ... Important The data_path field should be relative to the project folder itself (i.e. the data subfolder name within the project folder). Important The listed program should match a program name in the programs_info.yaml files located in the lab-administration/Programs subfolder. Important All listed members should match a member name in the members_info.yaml file located in the people subfolder.","title":"project_info.yaml"},{"location":"schema/projects/#project_infoyaml","text":"project_name: Project Name ethics: integer start_date: YYYY-MM-DD end_date: YYYY-MM-DD data_path: \"./XX_Data/\" program: Program Name members: - Member Name - ... location: - name: NC Lab, ... participants: groups: - label: Group Label total: 0 collected: 0 attributes: [\"attribute one\", \"attribute two\", ...] data_sources: - category: motion modality: imu, gait-carpet, mocap device: Shimmer, Opals, ... - category: physio modality: cardiac, respiratory, pupils, eda, emg device: Shimmer, Bittium, ... - category: neuro modality: func, anat, dwi, nirs, eeg device: NIRx, ... - category: clinic modality: clinometrics, demographics device: FoG-Q, PDQ, UPDRS, ... - category: misc modality: beh, video device: GoPro, ... outputs: - name: Output Title type: Publication, Pre-print, Conference poster, Conference presentation, ... url: https://doi.org/ date: YYYY-MM-DD - ... Important The data_path field should be relative to the project folder itself (i.e. the data subfolder name within the project folder). Important The listed program should match a program name in the programs_info.yaml files located in the lab-administration/Programs subfolder. Important All listed members should match a member name in the members_info.yaml file located in the people subfolder.","title":"project_info.yaml"},{"location":"setup/install/","text":"Installation & Configuration NeuroCog DB A Python 3+ installation is required to run NeuroCog DB. See Python installation instructions below if you do not have it installed on your current system. It is recommended to install NeuroCog DB in a virtual environment in order to avoid package and versioning conflicts across Python libraries. See Using virtual environments for more information. To install NeuroCog DB: Open a terminal and run the installation command: pip install git+https://github.com/neurocog-mobility/neurocog-db.git Test the installation and view all available commands: neurocogdb --help Upgrading NeuroCog DB Once installed, to upgrade to a newer release add the --upgrade flag: pip install --upgrade git+https://github.com/neurocog-mobility/neurocog-db.git Configuring NeuroCog DB Neurocog DB requires setting a path to the root folder of the NeuroCog drive. To view the currently configured path, run: neurocogdb config For a fresh installation, this should return None . To find the correct configuration path, open a terminal in the root folder of the NeuroCog drive on your computer. To set the path, run: neurocogdb config --set Paste the folder path in the prompt and click Ok . You should get confirmation of the updated path. Syncing and viewing the data catalog Once you have configured the root path, simply run: neurocogdb sync To update the data catalog, then run: neurocogdb gui Use ctrl/command + click on the URL displayed in the terminal to launch a browser-based interface to view the data catalog.","title":"Installation &amp; Configuration"},{"location":"setup/install/#installation-configuration","text":"","title":"Installation &amp; Configuration"},{"location":"setup/install/#neurocog-db","text":"A Python 3+ installation is required to run NeuroCog DB. See Python installation instructions below if you do not have it installed on your current system. It is recommended to install NeuroCog DB in a virtual environment in order to avoid package and versioning conflicts across Python libraries. See Using virtual environments for more information. To install NeuroCog DB: Open a terminal and run the installation command: pip install git+https://github.com/neurocog-mobility/neurocog-db.git Test the installation and view all available commands: neurocogdb --help","title":"NeuroCog DB"},{"location":"setup/install/#upgrading-neurocog-db","text":"Once installed, to upgrade to a newer release add the --upgrade flag: pip install --upgrade git+https://github.com/neurocog-mobility/neurocog-db.git","title":"Upgrading NeuroCog DB"},{"location":"setup/install/#configuring-neurocog-db","text":"Neurocog DB requires setting a path to the root folder of the NeuroCog drive. To view the currently configured path, run: neurocogdb config For a fresh installation, this should return None . To find the correct configuration path, open a terminal in the root folder of the NeuroCog drive on your computer. To set the path, run: neurocogdb config --set Paste the folder path in the prompt and click Ok . You should get confirmation of the updated path.","title":"Configuring NeuroCog DB"},{"location":"setup/install/#syncing-and-viewing-the-data-catalog","text":"Once you have configured the root path, simply run: neurocogdb sync To update the data catalog, then run: neurocogdb gui Use ctrl/command + click on the URL displayed in the terminal to launch a browser-based interface to view the data catalog.","title":"Syncing and viewing the data catalog"},{"location":"setup/useful-info/","text":"Useful Information Using the Terminal A terminal is a text-based interface that lets you communicate with a computer's operating system. It's also known as a command-line interface (CLI). To launch a terminal on Windows, enter \"Terminal\" into the program search bar. Closing the terminal window will also stop any processes currently running in the terminal. To open a terminal in a specific folder, you can: Option A: Use the command: cd <path_to_folder> Where you can replace <path_to_folder> with the folder path you would like to execute terminal commands in. Option B: Open the folder using File Explorer, then right-click in the folder and select Open in Terminal . When copying/pasting text into the terminal, you can use the keyboard shortcuts Ctrl + Shift + C / Ctrl + Shift + V for copy/paste, respectively. Checking Python version You can check which version of Python is installed by opening a Terminal and entering the command python -V . Important Some systems may use python3 instead of python . If you get a message Command 'python' not found. then try again using: python3 -V . Using virtual environments Creating and using a virtual environment in Python is a crucial step for managing project dependencies. It ensures that each project has its own isolated set of packages, preventing conflicts between different projects. Create : First, navigate to your project's root directory in your terminal. We'll name the virtual environment folder .venv (this is a common convention). python -m venv .venv Activate : Before installing any packages for your project, you must activate the virtual environment. Activation changes your terminal's shell so that the python command points to the version inside the .venv folder, and pip installs packages there. Windows (Powershell): .\\.venv\\Scripts\\Activate.ps1 Windows (Command Prompt): .\\.venv\\Scripts\\activate.bat Mac/Linux: source .venv/bin/activate Once activated, your terminal prompt will usually be prefixed with the name of the environment (e.g., (.venv)): (.venv) $","title":"Useful Information"},{"location":"setup/useful-info/#useful-information","text":"","title":"Useful Information"},{"location":"setup/useful-info/#using-the-terminal","text":"A terminal is a text-based interface that lets you communicate with a computer's operating system. It's also known as a command-line interface (CLI). To launch a terminal on Windows, enter \"Terminal\" into the program search bar. Closing the terminal window will also stop any processes currently running in the terminal. To open a terminal in a specific folder, you can: Option A: Use the command: cd <path_to_folder> Where you can replace <path_to_folder> with the folder path you would like to execute terminal commands in. Option B: Open the folder using File Explorer, then right-click in the folder and select Open in Terminal . When copying/pasting text into the terminal, you can use the keyboard shortcuts Ctrl + Shift + C / Ctrl + Shift + V for copy/paste, respectively.","title":"Using the Terminal"},{"location":"setup/useful-info/#checking-python-version","text":"You can check which version of Python is installed by opening a Terminal and entering the command python -V . Important Some systems may use python3 instead of python . If you get a message Command 'python' not found. then try again using: python3 -V .","title":"Checking Python version"},{"location":"setup/useful-info/#using-virtual-environments","text":"Creating and using a virtual environment in Python is a crucial step for managing project dependencies. It ensures that each project has its own isolated set of packages, preventing conflicts between different projects. Create : First, navigate to your project's root directory in your terminal. We'll name the virtual environment folder .venv (this is a common convention). python -m venv .venv Activate : Before installing any packages for your project, you must activate the virtual environment. Activation changes your terminal's shell so that the python command points to the version inside the .venv folder, and pip installs packages there. Windows (Powershell): .\\.venv\\Scripts\\Activate.ps1 Windows (Command Prompt): .\\.venv\\Scripts\\activate.bat Mac/Linux: source .venv/bin/activate Once activated, your terminal prompt will usually be prefixed with the name of the environment (e.g., (.venv)): (.venv) $","title":"Using virtual environments"}]}